name: 'Test-Terraform'

on:
  push:
    branches-ignore:
    - main

jobs:
  terraform:
    name: 'Main Pipeline'
    runs-on: ubuntu-20.04
    env:
      ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      CI_CD_ROLE_ARN: ${{ secrets.CI_CD_ROLE_ARN }}
      CI_CD_ROLE: ${{ secrets.CI_CD_ROLE }}
      DESTROY: '0'
      TF_IN_AUTOMATION: 1
      TF_VAR_role_arn: ${{ secrets.CI_CD_ROLE_ARN }}
      TF_VAR_profile: "demo"
      TF_VAR_lambda-role: ${{ secrets.LAMBDA_ROLE_ARN}}
      TF_VAR_lambda-name: "stopEC2-Instances-demo"
      TF_VAR_code-bucket: "code-signing-demo"
      TF_VAR_region: "us-east-1"
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    

    # Checkout the repository to the GitHub Actions runner
    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.0


    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init

    - name: Generate AWS Profile
      run: |
          mkdir ~/.aws/
          echo -e "[default]" > ~/.aws/credentials
          echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID">> ~/.aws/credentials
          echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY">> ~/.aws/credentials
          echo -e "[default]" > ~/.aws/config
          echo -e "region = us-east-1" >> ~/.aws/config
          echo -e "output = json" >> ~/.aws/config
          echo -e "[profile demo]" >> ~/.aws/config
          echo -e "role_arn=arn:aws:iam::$ACCOUNT_ID:role/$CI_CD_ROLE" >> ~/.aws/config
          echo -e "source_profile = default" >> ~/.aws/config
          echo -e "region = us-east-1" >> ~/.aws/config
          echo -e "output = json" >> ~/.aws/config

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: env.DESTROY != '1'
      run: terraform plan -out="tf-plan"

  
      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: env.DESTROY != '1'
      run: terraform apply -auto-approve

    - name: Terraform destroy
      if:  env.DESTROY == '1'
      run: terraform destroy -auto-approve



